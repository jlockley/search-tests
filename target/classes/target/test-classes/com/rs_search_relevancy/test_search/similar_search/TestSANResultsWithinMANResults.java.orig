/**
 * 
 */
package com.rs_search_relevence.test_search.similar_search;

import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.TreeSet;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import com.ec.containers.pojo.EndecaItem;
import com.ec.endeca.EndecaConnnection;
import com.ec.endeca.EndecaResult;
import com.ec.endeca.EndecaResultsGetter;
import com.ec.utils.TestConfigReader;
import com.endeca.navigation.ENEQueryException;
import com.endeca.navigation.HttpENEConnection;

/**
 * <pre>
 * ************************************************************************************************
 * Copyright (c) Electrocomponents Plc.
 *
 * Author  : <<<<user name>>>>
 * Created : 7 Apr 2016 at 10:42:36
 *
 * ************************************************************************************************
 * </pre>
 */

@RunWith(Parameterized.class)
public class TestSANResultsWithinMANResults {
	
	private static ArrayList<String> listOfFamilies;
    private TestConfigReader testConfigReader = new TestConfigReader();
	
	@Before
    public void familyList() {
    	listOfFamilies = new ArrayList<String>() {
            {
            	add("Automotive Fuses");
            	add("Bolted Tag Fuses");
            	add("Bottle Fuses");
            	add("Cartridge Fuses");
            	add("Centered Tag Fuses");
            	add("Hole Mounted Tag Fuses");
            	add("Non-resettable Surface Mount Fuses");
            	add("Non-resettable Thermal Fuses");
            	add("Non-Resettable Wire Ended Fuses");
            	add("Offset Tag Fuses");
            	add("Resettable Surface Mount Fuses");
            	add("Resettable Thermal Fuses");
            	add("Resettable Wire Ended Fuses");
            	add("Slotted Tag Fuses");

             }
        };


    }
	
    private String searchInterface;
    private String searchTerm;
    private String searchTerm2;
    private String wildCard;
    private static TreeSet<EndecaItem> itemsFromSearchOne; 
    private static TreeSet<EndecaItem> itemsFromSearchTwo; 
//    private static ArrayList<String> listOfFamilies = familyList(); 

    public TestSANResultsWithinMANResults(String searchInterface, String searchTerm, String searchTerm2, String wildCard) {
    	this.searchInterface = searchInterface;
    	this.searchTerm = searchTerm;
    	this.searchTerm2 = searchTerm2;
    	this.wildCard = wildCard;
   }
    
    @Parameterized.Parameters(name="MAN: {1} vs SAN : {2} Similar Search, Interface: {0}")
    public static Collection<Object[]> createTestData(){ 
        return Arrays.asList(new Object[][] {
            { "I18NKnownAsMPN", "12 ohm", "12ohm", "N"},
            { "I18NKnownAsMPN", "12 v", "12v", "N"},
            { "I18NKnownAsMPN", "12 A", "12A", "N"},
            { "I18NKnownAsMPN", "12 amp", "12amp", "N"}, 
            { "I18NKnownAsMPN", "12 uf", "12uf", "N"},
            { "I18NKnownAsMPN", "3 nf", "3nf", "N"},
            { "I18NKnownAsMPN", "40 nf", "40nf", "N"},
            { "I18NKnownAsMPN", "3 uf", "3uf", "N"},
        });
    }
    
    @Test
    public void runCapacitorTests() {
        
        EndecaResultsGetter getItemsHelper = new EndecaResultsGetter();
        EndecaConnnection CONN = testConfigReader.getEndecaConnGivenTestConfig();
        HttpENEConnection endecaConn = CONN.getConnection(); 
        EndecaResult result1 = null;
        EndecaResult result2 = null;
        String opts = "mode matchall";
        
        try {
           result1 = getItemsHelper.runEndecaSearch(searchInterface, endecaConn, searchTerm, opts, wildCard);
           result2 = getItemsHelper.runEndecaSearch(searchInterface, endecaConn, searchTerm2, opts, wildCard);
        } catch (ENEQueryException e) {
            e.printStackTrace();
        }
        
        searchContainsResults(result1, result2);
        
    }
    
    public void searchContainsResults(EndecaResult result1, EndecaResult result2){
        try{
            itemsFromSearchOne = new TreeSet<EndecaItem>(result1.getEndecaItems());
            itemsFromSearchTwo = new TreeSet<EndecaItem>(result2.getEndecaItems());
        }catch(NullPointerException e){
            throw new NullPointerException(String.format("1: {%s} 2: {%s} were used", itemsFromSearchOne, itemsFromSearchTwo));
        }
        
        itemsFromSearchTwo.removeAll(itemsFromSearchOne);
        
        TreeSet<EndecaItem> itemsFromSearchTwoClone = (TreeSet<EndecaItem>) itemsFromSearchTwo.clone();
        System.out.println(itemsFromSearchTwoClone.size());
        for(EndecaItem item : itemsFromSearchTwo){
        	if(!listOfFamilies.contains(item.getFamilyGroup())){
        		itemsFromSearchTwoClone.remove(item);
        	}
        }
        
//	      if(itemsFromSearchTwoClone.size() > 0){
//	    	ArrayList<EndecaItem> itemBin = null;
//	    	ArrayList<EndecaItem> itemsContainDecimal = null;
//	    	String searchNumeric = searchTerm.replaceAll("[^\\d.]", "");
//	    	for(EndecaItem item : itemsFromSearchTwoClone){
//	    		if(item.getLongDesc().substring(item.getLongDesc().indexOf(searchNumeric), item.getLongDesc().indexOf(searchNumeric) - 1)  == "."){
//	    			itemsContainDecimal.add(item);
//	    		}else{
//	    			itemBin.add(item);
//	    		}
//	    	}
//	    	System.out.println("item bin: " + itemBin.size() + "Items with decimal: " + itemsContainDecimal.size());
//	      }
        
        System.out.println(itemsFromSearchTwoClone.size());
        assertTrue("SAN results are not all contained within MAN search", itemsFromSearchTwoClone.size() == 0);
    }	
}
