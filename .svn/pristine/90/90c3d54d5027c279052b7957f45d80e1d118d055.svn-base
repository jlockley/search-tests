/**
 * 
 */
package com.rs_search_relevancy.test_search.similar_search;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import com.ec.analytics.checks.generics.groupItemGenerics;
import com.ec.endeca.EndecaConnnection;
import com.ec.endeca.EndecaResult;
import com.ec.endeca.EndecaResultsGetter;
import com.ec.utils.TestConfigReader;
import com.endeca.navigation.ENEQueryException;
import com.endeca.navigation.HttpENEConnection;

/**
 * <pre>
 * ************************************************************************************************
 * Copyright (c) Electrocomponents Plc.
 *
 * Author  : <<<<user name>>>>
 * Created : 12 Apr 2016 at 10:54:35
 *
 * ************************************************************************************************
 * </pre>
 */

@RunWith(Parameterized.class)
public class TestCategoryCountResistors {
    
    private String searchInterface;
    private String searchTerm;
    private String searchTerm2;
    private String wildCard;
    
    private ArrayList<String> listOfFamilies;
    private String opts = "mode matchall";
    private TestConfigReader testConfigReader = new TestConfigReader();
    
    @Before
    public void initialize() {
        listOfFamilies = new ArrayList<String>() {
            {
                add("Array Resistors");
                add("Adjustable Resistors");
                add("Panel Mount Fixed Resistors");
                add("Resistor Sample Kits");
                add("Surface Mount Fixed Resistors");
                add("Through Hole Fixed Resistors");
                add("Potentiometers");
                add("Thermistors");
                add("Trimmer Resistors");
             }
        };
    }

   // Each parameter should be placed as an argument here
   // Every time runner triggers, it will pass the arguments
   // from parameters we defined in primeNumbers() method
    public TestCategoryCountResistors(String searchInterface, String searchTerm, String searchTerm2, String wildCard) {
        this.searchInterface = searchInterface;
        this.searchTerm = searchTerm;
        this.searchTerm2 = searchTerm2;
        this.wildCard = wildCard;
   }

    @Parameterized.Parameters(name="{1} vs {2} Similar Search, Interface: {0}")
    public static Collection<Object[]> createTestData(){
        return Arrays.asList(new Object[][] {
            { "I18NsearchBySimilar", "0.54 A", "0.63 A", "N"},
            { "I18NsearchBySimilar", "0.54A", "0.63A", "N"},
            { "I18NLDescTaxonomyBrandSearchTerm2", "2000 ohms", "2000ohms", "N"},
            { "I18NLDescTaxonomyBrandSearchTerm2", "1 kiloohm", "1kiloohm", "N"},
            { "I18NLDescTaxonomyBrandSearchTerm2", "9 kohm", "9kohm", "N"},
            { "I18NLDescTaxonomyBrandSearchTerm2", "4 kiloohm", "4kiloohm", "N"},
            { "I18NLDescTaxonomyBrandSearchTerm2", "3 kiloohms", "3kiloohms", "N"},
            { "I18NLDescTaxonomyBrandSearchTerm2", "2 kohms", "2kohms", "N"},  
            { "I18NLDescTaxonomyBrandSearchTerm2", "6 kohms", "6kohms", "N"}, 
            { "I18NLDescTaxonomyBrandSearchTerm2", "30 kohms", "30kohms", "N"},
            { "I18NLDescTaxonomyBrandSearchTerm2", "15 kohms", "15kohms", "N"}
        });
    }

    
    @Test
    public void runOhmsTest() {

        EndecaResultsGetter getItemsHelper = new EndecaResultsGetter();
        EndecaConnnection CONN = testConfigReader.getEndecaConnGivenTestConfig();
        HttpENEConnection endecaConn = CONN.getConnection();     EndecaResult result1 = null;
        EndecaResult result2 = null;
        String opts = "mode matchall";
        
        try {
           result1 = getItemsHelper.runEndecaSearch(searchInterface, endecaConn, searchTerm, opts, wildCard);
           result2 = getItemsHelper.runEndecaSearch(searchInterface, endecaConn, searchTerm2, opts, wildCard);
        } catch (ENEQueryException e) {
            e.printStackTrace();
        }
        Map<String, Integer> familyMapping = groupItemGenerics.groupByFamilyEndecaCount(result1.getEndecaItems());
        Map<String, Integer> familyMapping2 = groupItemGenerics.groupByFamilyEndecaCount(result2.getEndecaItems());
        
        
        System.out.println("\n-------------------Family Mappings for search-----------------------");
        System.out.println("Query " + searchTerm + " : " + familyMapping);
        System.out.println("Query " + searchTerm2 + " : " + familyMapping2);
        System.out.println("----------------------------------------------------------------------\n");
        
        result1.printResults();
        result2.printResults();
        
        for (String key : familyMapping.keySet()){
            Integer queryOneResult = familyMapping.get(key);
            Integer queryTwoResult = familyMapping2.get(key);
            for(String family : listOfFamilies ){
                if(key.contains(family)){
                    if(queryOneResult != queryTwoResult ){
                        SimilarSearchDiagnosisTools.findOddOneOut(family, result1, result2);
                    }
                    Assert.assertEquals(String.format("asserting family {%s} contains same item count for query: {%s} vs {%s}",key, searchTerm, searchTerm2), queryOneResult, queryTwoResult);
                    break;
                }
            }        
        };
    }
}
