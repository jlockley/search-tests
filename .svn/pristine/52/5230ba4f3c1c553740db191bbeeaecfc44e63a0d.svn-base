/**
 * 
 */
package com.rs_search_relevancy.test_search.similar_search;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import com.ec.analytics.checks.generics.groupItemGenerics;
import com.ec.endeca.EndecaConnnection;
import com.ec.endeca.EndecaResult;
import com.ec.endeca.EndecaResultsGetter;
import com.ec.utils.TestConfigReader;
import com.endeca.navigation.ENEQueryException;
import com.endeca.navigation.HttpENEConnection;



/**
 * <pre>
 * ************************************************************************************************
 * Copyright (c) Electrocomponents Plc.
 *
 * Author  : <<<<user name>>>>
 * Created : 7 Apr 2016 at 10:42:36
 *
 * ************************************************************************************************
 * </pre>
 */

@RunWith(Parameterized.class)
public class TestCategoryCountCapacitors{
	
	private static ArrayList<String> capacitorFamilyList;
    private TestConfigReader testConfigReader = new TestConfigReader();
	
    private String searchInterface;
    private String searchTerm;
    private String searchTerm2;
    private String wildCard;
    
    public TestCategoryCountCapacitors(String searchInterface, String searchTerm, String searchTerm2, String wildCard) {
    	this.searchInterface = searchInterface;
    	this.searchTerm = searchTerm;
    	this.searchTerm2 = searchTerm2;
    	this.wildCard = wildCard;
   }
    
    @Before
    public void initialize() {
        capacitorFamilyList = new ArrayList<String>() {
            {
                add("Aluminium Capacitors");
                add("Array Capacitors");
                add("Ceramic Multilayer Capacitors");
                add("Ceramic Single Layer Capacitors");
                add("Electric Double Layer Capacitors");
                add("Mica Capacitors");
                add("Multilayer Organic Capacitors");
                add("Niobium Capacitors");
                add("Paper Capacitors");
                add("Polyester Film Capacitors");
                add("PEN Film Capacitors");
                add("Polyphenylene Sulphide Film Capacitors");
                add("Polypropylene Film Capacitors");
                add("RC Network Capacitors");
                add("Tantalum Capacitors");
                add("Variable Trimmer Capacitors");
             }
        };
    };

    @Parameterized.Parameters(name="{1} vs {2} Similar Search Capacitors, Interface: {0}")
    public static Collection<Object[]> createTestData(){
    	return CategoryCountData.createVoltageData();           
    }
    
    @Test
    public void runCapacitorTests() {
        
        EndecaResultsGetter getItemsHelper = new EndecaResultsGetter();
        EndecaConnnection CONN = testConfigReader.getEndecaConnGivenTestConfig();
        HttpENEConnection endecaConn = CONN.getConnection();        
        EndecaResult result1 = null;
        EndecaResult result2 = null;
        String opts = "mode matchall";
        
        try {
           result1 = getItemsHelper.runEndecaSearch(searchInterface, endecaConn, searchTerm, opts, wildCard);
           result2 = getItemsHelper.runEndecaSearch(searchInterface, endecaConn, searchTerm2, opts, wildCard);
        } catch (ENEQueryException e) {
            e.printStackTrace();
        }
        Map<String, Integer> familyMapping = groupItemGenerics.byFamilyCount(result1.getEndecaItems());
        Map<String, Integer> familyMapping2 = groupItemGenerics.byFamilyCount(result2.getEndecaItems());
        
        
        System.out.println("\n-------------------Family Mappings for search-----------------------");
        System.out.println("Query " + searchTerm + " : " + familyMapping);
        System.out.println("Query " + searchTerm2 + " : " + familyMapping2);
        System.out.println("----------------------------------------------------------------------\n");
        
        result1.printResults();
        result2.printResults();
        
        for (String key : familyMapping.keySet()){
            Integer queryOneResult = familyMapping.get(key);
            Integer queryTwoResult = familyMapping2.get(key);
            for(String family : capacitorFamilyList ){
                if(key.contains(family)){
                    if(queryOneResult != queryTwoResult ){
                        //SimilarSearchDiagnosisTools.findOddOneOut(family, result1, result2);
                    }
                    Assert.assertEquals(String.format("asserting family {%s} contains same item count for query: {%s} vs {%s}",key, searchTerm, searchTerm2), queryOneResult, queryTwoResult);
                    break;
                }
            }        
        };
    }
    

}
