/**
 * 
 */
package com.rs_search_relevance.test_search.quepid;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import com.ec.containers.test.Query;
import com.ec.containers.test.TestCase;
import com.ec.quepid.bot.NoThreadCupidBot;
import com.ec.quepid.bot.QupidBotFactory;
import com.ec.utils.CrawlerPropertiesReader;
import com.ec.utils.EnvPropertiesReader;
import com.ec.web.scrappers.NoThreadGeneralWebBot;
import com.ec.web.scrappers.ScrapperFactory;

/**
 * <pre>
 * ************************************************************************************************
 * Copyright (c) Electrocomponents Plc.
 *
 * Author  : <<<<user name>>>>
 * Created : 24 Mar 2016 at 11:12:19
 *
 * ************************************************************************************************
 * </pre>
 */

@RunWith(Parameterized.class)
public class TestQuepidCategoryNumberCheck {
   

    private String locale;
    private QupidBotFactory qupidBotFactory= new QupidBotFactory();
    private CrawlerPropertiesReader crawlerPropertiesReader = new CrawlerPropertiesReader();
    private EnvPropertiesReader envPropertiesReader = new EnvPropertiesReader();
    private ScrapperFactory scrapperFactory;
    
    
    private final static String ENV = "st1";

    @Before
    public void initialize() {
        this.scrapperFactory = new ScrapperFactory(crawlerPropertiesReader, envPropertiesReader);
    }

   // Each parameter should be placed as an argument here
   // Every time runner triggers, it will pass the arguments
   // from parameters we defined in primeNumbers() method
    public TestQuepidCategoryNumberCheck(String locale) {
        this.locale = locale;
   }

    @Parameterized.Parameters(name="{0} : Cupid vs Web Category count")
    public static Collection<Object[]> createTestData(){
        
        return Arrays.asList(new Object[][] {
//            { "uk" },
////            { "au" },
////            { "nz" },
////            { "th" },
////            { "my" },
////            { "ph" },
////            { "hk01" },
////            { "tw01" },
//            { "it" },
//            { "de" },
//            { "f1" },
//            { "jp" },
//            { "cn" },
//            { "au" },
//            { "kr" },
//            { "my" },
//            { "nz" },
//            { "kr" },
//            { "ph" },
//            { "sg" },
//            { "th" },
//            { "at" },
//            { "cz" },
//            { "dk" },
//            { "es" },
//            { "hu" },
//            { "ie" }       
        });
    }

   @Test
   public void testWebEqualsCupidCategories() {
       System.out.println("Running test for locale : " + locale);
       TestCase testCase = buildTestCase(locale);
       Query qupidQuery = testCase.getQuerys().get(0);
       getCupidResult(testCase);
       Integer cupidCategoryCount = qupidQuery.getCupidQueryResult().getTotalNumberOfCategories();
       System.out.println(qupidQuery.getCupidQueryResult().getTotalNumberOfProducts());
       Integer webCategoryCount = getWebResult(qupidQuery.getQuery());   
       System.out.println("----------------------------------END TEST---------------------------------");
       Assert.assertEquals(String.format("locale {%s} : Asserting web and cupid category count equal each other ", locale)
               ,cupidCategoryCount, webCategoryCount);
       
   }
   
   private TestCase buildTestCase(String locale){
       List<String> typeSearch = new ArrayList<>();
       List<Query> queryList = new ArrayList<Query>();
       queryList.add(new Query("7683952"));
       TestCase newTestCase = new TestCase(String.format("Category in country : {%s}", locale), typeSearch,queryList,ENV, locale);
       return newTestCase;
   }
   
   private void getCupidResult(TestCase testCase){
       NoThreadCupidBot qupidBot = qupidBotFactory.createNonThreadCupidBot();
       qupidBot.getResults(testCase);
   }
   
   private Integer getWebResult(String item){
       NoThreadGeneralWebBot webBot = scrapperFactory.getNonThreadGeneralBot(locale, ENV);
       return webBot.getCategoriesCountForItem(item, true);
   }
  
}
       
    

