/**
 * 
 */
package com.ec.web.pages;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openqa.selenium.By;

import com.ec.web.drivers.WebDriverPageOps;

/**
 * <pre>
 * ************************************************************************************************
 * Copyright (c) Electrocomponents Plc.
 *
 * Author  : <<<<user name>>>>
 * Created : 17 Mar 2016 at 17:07:14
 *
 * ************************************************************************************************
 * </pre>
 */
public abstract class BasePage {
	
	private final By RS_SCRIPT_DATA = By.xpath("//script[contains(.,'var rs')]");
	private final By SEARCH_BOX = By.xpath("//input[contains(@name, 'searchTerm')]");
	private final By PREDICTIVE_DROPDOWN = By.xpath("//li[contains(@class, 'advSecContainer')");    
    private WebDriverPageOps pageOps;
    
    public BasePage(WebDriverPageOps pageOps){
        this.pageOps = pageOps;
    }
    
    public WebDriverPageOps getPageOps(){
        return pageOps;
    }
    
    public abstract String getPageName();
    
    public void searchForTerm(String item){
    	pageOps.openPage(pageOps.getBaseUrl() + "/web/c/?searchTerm=" + item + "&sra=oss&r=t");
    }
    
    public void typeIntoSearchBox(String query){
    	pageOps.openPage(pageOps.getBaseUrl());
    	pageOps.clearAndSendKeys(SEARCH_BOX, query);
    }
    
    public List<String> getPredictedItems(String stockNumText){
    	By RS_STOCK_NUM_PREDICTIONS = By.xpath(String.format("%s and .//span[contains(., '%s')]]/following-sibling::li", PREDICTIVE_DROPDOWN, stockNumText));
    	return pageOps.getTextFromAllElementsMatching(RS_STOCK_NUM_PREDICTIONS);
    }
    
    
    public String getResponseData(){
    	String scriptData = new String(getPageOps().elementToString(RS_SCRIPT_DATA));
    	return scriptData;
    }
    
//    public String getSearchBrowseData(StringBuffer scriptData){
//    	int startIndex = scriptData.indexOf("search_browse:");
//    	int endIndex = scriptData.indexOf(",search_cascade_order:");
//    	String searchBrowseData = scriptData.substring(startIndex, endIndex).replace(" ", "");
//    	return searchBrowseData;
//    }
//    
//    public String getSearchResponseActionData(StringBuffer scriptData){
//    	int startIndex = scriptData.indexOf("search_response_action");
//    	int endIndex = scriptData.indexOf(",page_name:");
//    	String searchResponseActionData = scriptData.substring(startIndex, endIndex).replace(" ", "");
//    	return searchResponseActionData; 
//    }
    
    public String getScriptTagProperty(String tagName){
    	String tagNameProperty = new String();
    	String scriptData = pageOps.elementToString(RS_SCRIPT_DATA);
    	Pattern pattern = Pattern.compile(tagName + ":'(.*?)'");
    	System.out.println("Pattern : "+  pattern.toString());
    	Matcher matcher = pattern.matcher(scriptData);
    	if (matcher.find()) {
    		tagNameProperty = matcher.group(1);
    	}else{
    		tagNameProperty = "Script Tag Was Not Found";
    	}
    	System.out.println("- - - - - - Script Tag = " + tagNameProperty);
    	return tagNameProperty;
    }

    public void closeBrowser(){
        getPageOps().exit();
    }

}
